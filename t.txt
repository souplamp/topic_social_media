[Message Exchange System]

Requirements:
(X) Person may register account with service (use prev. assignment).
(X) System maintains topics (message threads).
(_) User can subscribe to topic.
(_) User can start new topic (subscribe them to said topic).
(_) User can post message in subscribed topic.
(_) Upon logic, user can see 2 most recent messages posted in each subscribed topic.
(_) In entry page (above), link to show all topics.
(_) In entry page (above), link to unsubscribe from already subscribed topics.
(_) The architecture of code MUST implement MVC / Observer patterns.
(_) Plan to use Node-Mongo and render.com.
(X) Use Singleton for Database access.

-

topics can be entries in the database..

[TOPIC]
handle messages as array[array[string]].
array1 is an array of "messages", must be >= 0 in size
array2 is a single "message", string for associated user and their message text (must be == 2 in size)
we also have a "title" to display for the message.

[USERS]
for each user, we need to keep the ids of topics subscribed in their account.
array[ids] <- store and add ids (objectid according to mongodb)..

fyi: ObjectId('codegoeshere')
must be wrapped like so.. but double check documentation

-

create singleton database connection we can use to communicate.
this instance will be able to switch collections (users, topics).
we can use .find() to get records easily (even all records).
we can also use updateone() to update subscriptions for users.